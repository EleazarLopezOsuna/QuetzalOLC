/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var main_grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,16],$V2=[1,6],$V3=[1,15],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,11],$V9=[1,13],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,21],$Vf=[1,22],$Vg=[2,5,9,13,14,17,18,19,20,21,39,41,42,43,44,45,46],$Vh=[1,25],$Vi=[1,26],$Vj=[1,27],$Vk=[1,28],$Vl=[1,29],$Vm=[1,30],$Vn=[1,31],$Vo=[1,32],$Vp=[1,33],$Vq=[1,34],$Vr=[1,35],$Vs=[1,36],$Vt=[1,37],$Vu=[1,38],$Vv=[1,39],$Vw=[1,40],$Vx=[2,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,35,39,41,42,43,44,45,46],$Vy=[2,5,8,9,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,35,39,41,42,43,44,45,46],$Vz=[2,5,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,35,39,41,42,43,44,45,46],$VA=[2,5,13,14,15,16,17,18,19,20,21,24,25,28,29,30,34,35,39,41,42,43,44,45,46],$VB=[2,5,13,14,15,16,17,18,19,20,21,30,34,35,39,41,42,43,44,45,46];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"pr_init":3,"pr_instructions":4,"EOF":5,"pr_instruction":6,"pr_expr":7,"tk_plus":8,"tk_minus":9,"tk_times":10,"tk_division":11,"tk_mod":12,"tk_power":13,"tk_par_o":14,"tk_comma":15,"tk_par_c":16,"tk_sqrt":17,"tk_sin":18,"tk_cos":19,"tk_tan":20,"tk_log10":21,"tk_less_equal":22,"tk_greater_equal":23,"tk_double_equal":24,"tk_not_equal":25,"tk_greater":26,"tk_less":27,"tk_and":28,"tk_or":29,"tk_dot":30,"tk_length":31,"tk_uppercase":32,"tk_lowercase":33,"tk_concat":34,"tk_repeat":35,"tk_position":36,"tk_substring":37,"pr_unary":38,"tk_not":39,"pr_native":40,"tk_float":41,"tk_string":42,"tk_null":43,"tk_char":44,"tk_int":45,"tk_bool":46,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tk_plus",9:"tk_minus",10:"tk_times",11:"tk_division",12:"tk_mod",13:"tk_power",14:"tk_par_o",15:"tk_comma",16:"tk_par_c",17:"tk_sqrt",18:"tk_sin",19:"tk_cos",20:"tk_tan",21:"tk_log10",22:"tk_less_equal",23:"tk_greater_equal",24:"tk_double_equal",25:"tk_not_equal",26:"tk_greater",27:"tk_less",28:"tk_and",29:"tk_or",30:"tk_dot",31:"tk_length",32:"tk_uppercase",33:"tk_lowercase",34:"tk_concat",35:"tk_repeat",36:"tk_position",37:"tk_substring",39:"tk_not",41:"tk_float",42:"tk_string",43:"tk_null",44:"tk_char",45:"tk_int",46:"tk_bool"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[7,3],[7,3],[7,3],[7,3],[7,3],[7,6],[7,4],[7,4],[7,4],[7,4],[7,4],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,5],[7,5],[7,5],[7,3],[7,3],[7,6],[7,8],[7,1],[38,2],[38,1],[38,3],[38,2],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2:

        $$[$0-1].push($$[$0])
        this.$ = $$[$0-1]
    
break;
case 3:

        this.$ = [$$[$0]]
    
break;
case 4: case 32: case 34:

        this.$ = $$[$0]
    
break;
case 5:

        error_arr.push(new error(_$[$0].first_line, _$[$0].first_column, error_type.SINTACTICO, yytext));  
    
break;
case 6:

        this.$ = new arithmetic_binary($$[$0-2], $$[$0], arithmetic_binary_type.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 7:

        this.$ = new arithmetic_binary($$[$0-2], $$[$0], arithmetic_binary_type.MINUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 8:
 
        this.$ = new arithmetic_binary($$[$0-2], $$[$0], arithmetic_binary_type.TIMES, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 9:

        this.$ = new arithmetic_binary($$[$0-2], $$[$0], arithmetic_binary_type.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 10:

        this.$ = new arithmetic_binary($$[$0-2], $$[$0], arithmetic_binary_type.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 11:

        this.$ = new arithmetic_binary($$[$0-3], $$[$0-1], arithmetic_binary_type.POWER, _$[$0-5].first_line,_$[$0-5].first_column);
    
break;
case 12:

        this.$ = new arithmetic_unary($$[$0-1], arithmetic_unary_type.SQRT, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 13:

        this.$ = new arithmetic_unary($$[$0-1], arithmetic_unary_type.SIN, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 14:

        this.$ = new arithmetic_unary($$[$0-1], arithmetic_unary_type.COS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 15:

        this.$ = new arithmetic_unary($$[$0-1], arithmetic_unary_type.TAN, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 16:

        this.$ = new arithmetic_unary($$[$0-1], arithmetic_unary_type.LOG10, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 17:

        this.$ = new relational($$[$0-2], $$[$0],relational_type.LESSOREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 18:

        this.$ = new relational($$[$0-2], $$[$0],relational_type.GREATEROREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 19:

        this.$ = new relational($$[$0-2], $$[$0],relational_type.EQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 20:

        this.$ = new relational($$[$0-2], $$[$0],relational_type.NOTEQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 21:

        this.$ = new relational($$[$0-2], $$[$0],relational_type.GREATER ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 22:

        this.$ = new relational($$[$0-2], $$[$0],relational_type.LESS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 23:

        this.$ = new logic($$[$0-2], $$[$0],logic_type.AND ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 24:

        this.$ = new logic($$[$0-2], $$[$0],logic_type.OR ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 25:

        this.$ = new string_unary($$[$0-4],string_unary_type.LENGTH ,_$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 26:

        this.$ = new string_unary($$[$0-4],string_unary_type.UPPERCASE ,_$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 27:

        this.$ = new string_unary($$[$0-4],string_unary_type.LOWERCASE ,_$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 28:

        this.$ = new string_binary($$[$0-2], $$[$0],string_binary_type.CONCAT ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 29:

        this.$ = new string_binary($$[$0-2], $$[$0],string_binary_type.REPEAT ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 30:

        this.$ = new string_binary($$[$0-5], $$[$0-1],string_binary_type.POSITION ,_$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 31:

        this.$ = new string_ternary($$[$0-7], $$[$0-3], $$[$0-1], string_ternary_type.SUBSTRING ,_$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 33:

        this.$ = new unary($$[$0], unary_type.LOGIC ,_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 35:

        this.$ = $$[$0-1]
    
break;
case 36:

        this.$ = new unary($$[$0], unary_type.ARITHMETIC, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 37:

        this.$ = new native($$[$0], type.FLOAT ,_$[$0].first_line, _$[$0].first_column);
    
break;
case 38:

        this.$ = new native($$[$0], type.STRING ,_$[$0].first_line, _$[$0].first_column);
    
break;
case 39:

        this.$ = new native($$[$0], type.NULL ,_$[$0].first_line, _$[$0].first_column);
    
break;
case 40:

        this.$ = new native($$[$0], type.CHAR ,_$[$0].first_line, _$[$0].first_column);
    
break;
case 41:

        this.$ = new native($$[$0], type.INTEGER ,_$[$0].first_line, _$[$0].first_column);
    
break;
case 42:

        this.$ = new native($$[$0], type.BOOLEAN ,_$[$0].first_line, _$[$0].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{1:[3]},{2:$V0,5:[1,23],6:24,7:4,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},o($Vg,[2,3]),o([2,5,13,14,17,18,19,20,21,39,41,42,43,44,45,46],[2,4],{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,34:$Vv,35:$Vw}),o($Vg,[2,5]),{14:[1,41]},{14:[1,42]},{14:[1,43]},{14:[1,44]},{14:[1,45]},{14:[1,46]},o($Vx,[2,32]),{9:$V1,14:$V3,38:47,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},o($Vx,[2,34]),{7:48,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:49,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},o($Vx,[2,37]),o($Vx,[2,38]),o($Vx,[2,39]),o($Vx,[2,40]),o($Vx,[2,41]),o($Vx,[2,42]),{1:[2,1]},o($Vg,[2,2]),{7:50,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:51,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:52,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:53,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:54,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:55,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:56,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:57,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:58,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:59,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:60,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:61,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:62,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{31:[1,63],32:[1,64],33:[1,65],36:[1,66],37:[1,67]},{7:68,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:69,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:70,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:71,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:72,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:73,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:74,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:75,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},o($Vx,[2,33]),{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,16:[1,76],22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,34:$Vv,35:$Vw},o($Vx,[2,36]),o($Vy,[2,6],{10:$Vj,11:$Vk,12:$Vl}),o($Vy,[2,7],{10:$Vj,11:$Vk,12:$Vl}),o($Vx,[2,8]),o($Vx,[2,9]),o($Vx,[2,10]),o($Vz,[2,17],{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl}),o($Vz,[2,18],{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl}),o($VA,[2,19],{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,22:$Vm,23:$Vn,26:$Vq,27:$Vr}),o($VA,[2,20],{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,22:$Vm,23:$Vn,26:$Vq,27:$Vr}),o($Vz,[2,21],{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl}),o($Vz,[2,22],{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl}),o([2,5,13,14,15,16,17,18,19,20,21,28,29,30,34,35,39,41,42,43,44,45,46],[2,23],{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr}),o([2,5,13,14,15,16,17,18,19,20,21,29,30,34,35,39,41,42,43,44,45,46],[2,24],{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs}),{14:[1,77]},{14:[1,78]},{14:[1,79]},{14:[1,80]},{14:[1,81]},o($VB,[2,28],{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt}),o($VB,[2,29],{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt}),{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,15:[1,82],22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,34:$Vv,35:$Vw},{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,16:[1,83],22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,34:$Vv,35:$Vw},{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,16:[1,84],22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,34:$Vv,35:$Vw},{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,16:[1,85],22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,34:$Vv,35:$Vw},{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,16:[1,86],22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,34:$Vv,35:$Vw},{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,16:[1,87],22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,34:$Vv,35:$Vw},o($Vx,[2,35]),{16:[1,88]},{16:[1,89]},{16:[1,90]},{7:91,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:92,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},{7:93,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},o($Vx,[2,12]),o($Vx,[2,13]),o($Vx,[2,14]),o($Vx,[2,15]),o($Vx,[2,16]),o($Vx,[2,25]),o($Vx,[2,26]),o($Vx,[2,27]),{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,16:[1,94],22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,34:$Vv,35:$Vw},{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,15:[1,95],22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,34:$Vv,35:$Vw},{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,16:[1,96],22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,34:$Vv,35:$Vw},o($Vx,[2,30]),{7:97,9:$V1,13:$V2,14:$V3,17:$V4,18:$V5,19:$V6,20:$V7,21:$V8,38:12,39:$V9,40:14,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,46:$Vf},o($Vx,[2,11]),{8:$Vh,9:$Vi,10:$Vj,11:$Vk,12:$Vl,16:[1,98],22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,34:$Vv,35:$Vw},o($Vx,[2,31])],
defaultActions: {23:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {type} = require("../system/type") ;
    const { error, error_arr, error_type }= require("../system/error");

    const {arithmetic_binary, arithmetic_binary_type} = require('../expression/arithmetic_binary');
    const {arithmetic_unary, arithmetic_unary_type} = require('../expression/arithmetic_unary');
    const {relational, relational_type} = require('../expression/relational');
    const {logic, logic_type} = require('../expression/logic');
    const {unary, unary_type} = require('../expression/unary');
    const {string_unary, string_unary_type} = require('../expression/string_unary');
    const {string_binary, string_binary_type} = require('../expression/string_binary');
    const {string_ternary, string_ternary_type} = require('../expression/string_ternary');

    const {native} = require('../literal/native');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Skip Whitespace */
break;
case 1:/* Skip tabs */
break;
case 2:/* Skip return */
break;
case 3:/* Comments */
break;
case 4:/* Multiline Comments */
break;
case 5:return 36
break;
case 6:return 37
break;
case 7:return 31
break;
case 8:return 32
break;
case 9:return 33
break;
case 10:return 43
break;
case 11:return 46
break;
case 12:return 46
break;
case 13:return 13
break;
case 14:return 17
break;
case 15:return 18
break;
case 16:return 19
break;
case 17:return 20
break;
case 18:return 21
break;
case 19:return 45
break;
case 20:return 'tk_double'
break;
case 21:return 44
break;
case 22:return 'tk_string_type'
break;
case 23:return 'tk_if'
break;
case 24:return 'tk_else'
break;
case 25:return 'tk_switch'
break;
case 26:return 'tk_case'
break;
case 27:return 'tk_default'
break;
case 28:return 'tk_break'
break;
case 29:return 'tk_continue'
break;
case 30:return 'tk_while'
break;
case 31:return 'tk_do'
break;
case 32:return 'tk_for'
break;
case 33:return 'tk_void'
break;
case 34:return 'tk_main'
break;
case 35:return 'tk_println'
break;
case 36:return 'tk_print'
break;
case 37:return 'tk_return'
break;
case 38:return 'tk_struct'
break;
case 39:return 'tk_parse'
break;
case 40:return 'tk_toInt'
break;
case 41:return 'tk_toDouble'
break;
case 42:return 42
break;
case 43:return 'tk_typeof'
break;
case 44:return 'tk_function'
break;
case 45:return 'tk_elseif'
break;
case 46:return 'tk_break'
break;
case 47:return 'tk_continue'
break;
case 48:return 'tk_in'
break;
case 49:return 'tk_begin'
break;
case 50:return 'tk_end'
break;
case 51:return 'tk_push'
break;
case 52:return 'tk_pop'
break;
case 53:return 43
break;
case 54:return 45
break;
case 55:return 41
break;
case 56:return 42
break;
case 57:return 44
break;
case 58:return 'tk_id'
break;
case 59:return 10
break;
case 60:return 11
break;
case 61:return 'tk_double_plus'
break;
case 62:return 'tk_double_minus'
break;
case 63:return 8
break;
case 64:return 9
break;
case 65:return 12
break;
case 66:return 22
break;
case 67:return 23
break;
case 68:return 27
break;
case 69:return 26
break;
case 70:return 24
break;
case 71:return 25
break;
case 72:return 29
break;
case 73:return 34
break;
case 74:return 28
break;
case 75:return 39
break;
case 76:return 'tk_equal'
break;
case 77:return 14
break;
case 78:return 16 
break;
case 79:return 'tk_cbra_o'
break;
case 80:return 'tk_cbra_c'
break;
case 81:return 'tk_bra_o'
break;
case 82:return 'tk_bra_c'
break;
case 83:return 15
break;
case 84:return 35
break;
case 85:return 30
break;
case 86:return 'tk_ternary'
break;
case 87:return 'tk_colon'
break;
case 88:return 'tk_semicolon'
break;
case 89:return 'tk_hash'
break;
case 90:return 5
break;
case 91:error_arr.push(new error(yy_.yylloc.first_line, yy_.yylloc.first_column, error_type.LEXICO,'Valor inesperado ' + yy_.yytext));  
break;
}
},
rules: [/^(?:\s+)/,/^(?:\t)/,/^(?:\r)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:return\b)/,/^(?:struct\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:function\b)/,/^(?:elseif\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:in\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:null\b)/,/^(?:([0-9]+))/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:(([\"][^"]*[\"])))/,/^(?:(([\'][^\']{1}[\'])))/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_ñÑ]*))/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\^)/,/^(?:\.)/,/^(?:\?)/,/^(?::)/,/^(?:;)/,/^(?:#)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = main_grammar;
exports.Parser = main_grammar.Parser;
exports.parse = function () { return main_grammar.parse.apply(main_grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}